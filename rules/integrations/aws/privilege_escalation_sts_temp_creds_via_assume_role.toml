[metadata]
creation_date = "2021/05/17"
integration = ["aws"]
maturity = "production"
updated_date = "2024/11/01"

[rule]
author = ["Elastic", "Austin Songer"]
description = """
Identifies when a user has assumed a role in AWS Security Token Service (STS). Users can assume a role to obtain
temporary credentials and access AWS resources. Adversaries can use this technique for credential access and privilege
escalation.
"""
false_positives = [
    "AWS administrators or automated processes might regularly assume roles for legitimate administrative purposes.",
    "Applications integrated with AWS might assume roles to access AWS resources.",
    """
    Automated workflows might assume roles to perform periodic tasks such as data backups, updates, or deployments.
    """,
]
index = ["filebeat-*", "logs-aws.cloudtrail-*"]
language = "kuery"
license = "Elastic License v2"
name = "AWS STS Temporary Credentials via AssumeRole"
note = """
## Triage and Analysis

### Investigating AWS STS Temporary Credentials via AssumeRole

This rule identifies when a user assumes a role in AWS Security Token Service (STS), granting temporary credentials to access AWS resources. While often legitimate, adversaries may use this technique to gain unauthorized access, escalate privileges, or move laterally within an AWS environment.

#### Possible Investigation Steps

- **Identify the Actor and Assumed Role**:
  - **User Identity**: Review `aws.cloudtrail.user_identity.arn` and `aws.cloudtrail.user_identity.type` to understand who initiated the `AssumeRole` action.
  - **Role Assumed**: Check `aws.cloudtrail.flattened.request_parameters.roleArn` for the assumed role to confirm it aligns with the userâ€™s typical responsibilities.
  - **Session Name**: Note `aws.cloudtrail.flattened.request_parameters.roleSessionName` for context on the session purpose, if available.

- **Analyze the Role Session and Duration**:
  - **Session Context**: Look at `aws.cloudtrail.user_identity.session_context.creation_date` to establish when the session began and if multi-factor authentication (MFA) was used (`aws.cloudtrail.user_identity.session_context.mfa_authenticated`).
  - **Duration of Temporary Credentials**: Examine `aws.cloudtrail.flattened.request_parameters.durationSeconds` for credential validity.
  - **Expiration Time**: Verify `aws.cloudtrail.flattened.response_elements.credentials.expiration` to assess when the credentials will or did expire.

- **Inspect the User Agent for Tooling Identification**:
  - **User Agent Details**: Analyze the `user_agent.original` field to determine what tool or SDK was used to assume the role. This field can provide insights into the environment from which the request originated, such as:
    - **AWS SDKs (e.g., Boto3)**: Indicates the request was made programmatically, often as part of automated workflows or scripts.
    - **AWS CLI**: Suggests that a command-line interface was used, possibly indicating direct user access.
    - **Custom Tooling**: Unusual or non-standard user agents may indicate custom tooling, which could warrant further investigation.
  - **Source IP and Location**: Analyze `source.address` and `source.geo` fields for IP address and location to verify if the login source is unexpected.

- **Contextualize with Related Events**:
  - **Identify Patterns or Suspicious Behavior**: Review related CloudTrail events around the time of this `AssumeRole` action, such as access attempts to sensitive AWS resources.
  - **Evaluate ARN and User Agent for High-Volume Exceptions**: Due to the high-expected volume of these events, consider identifying common `roleArn` values or `user_agent` patterns that are legitimate and routinely used, then add these as exceptions to reduce noise.

- **Evaluate the Privilege Level of the Assumed Role**:
  - **Permissions**: Investigate permissions associated with the assumed role (`roleArn`) to understand the access level.
  - **Authorized Use**: Confirm if the role is typically used for administrative actions and if this user frequently assumes it in alignment with their responsibilities.

### False Positive Analysis

- **Automated Workflows and Applications**: Many applications or scheduled tasks may assume roles for periodic activities. Check the user agent and ARN patterns for consistency with known automated workflows.
- **Consistent Usage by IAM Policies**: Review historical actions to determine if the user or application regularly assumes this specific role as part of its standard operations.

### Response and Remediation

- **Revoke Unauthorized Sessions**: If the assume role activity appears unauthorized, consider revoking the session by adjusting IAM policies or permissions associated with the assumed role.
- **Strengthen Monitoring and Alerts**: Establish enhanced monitoring for specific high-risk roles, especially those with elevated privileges.
- **Exception Management**: Regularly review high-volume roles and user agent patterns, adding known, trusted ARNs and user agents to the exception list as needed to minimize alert fatigue.
- **Incident Response**: If malicious activity is confirmed, treat the event as an incident and follow incident response protocols, including containment, investigation, and remediation.

### Additional Information

For further guidance on managing and securing AWS STS in your environment, refer to the [AWS STS documentation](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) and AWS security best practices.
"""
references = ["https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html"]
risk_score = 21
rule_id = "93075852-b0f5-4b8b-89c3-a226efae5726"
severity = "low"
tags = [
    "Domain: Cloud",
    "Data Source: AWS",
    "Data Source: Amazon Web Services",
    "Data Source: AWS STS",
    "Resource: Investigation Guide",
    "Use Case: Identity and Access Audit",
    "Tactic: Privilege Escalation",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
event.dataset: "aws.cloudtrail"
    and event.provider: "sts.amazonaws.com"
    and event.action: "AssumeRole"
    and event.outcome: "success"
    and not (aws.cloudtrail.user_identity.invoked_by: (
                "config.amazonaws.com" or
                "securityhub.amazonaws.com" or
                "sso.amazonaws.com"
                )
            )
    and not (aws.cloudtrail.resources.arn: (*Amazon* or *AWS* or *Elastic* or *Wiz* or *DataDog*))
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1548"
name = "Abuse Elevation Control Mechanism"
reference = "https://attack.mitre.org/techniques/T1548/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1550"
name = "Use Alternate Authentication Material"
reference = "https://attack.mitre.org/techniques/T1550/"
[[rule.threat.technique.subtechnique]]
id = "T1550.001"
name = "Application Access Token"
reference = "https://attack.mitre.org/techniques/T1550/001/"



[rule.threat.tactic]
id = "TA0008"
name = "Lateral Movement"
reference = "https://attack.mitre.org/tactics/TA0008/"

[rule.new_terms]
field = "new_terms_fields"
value = ["aws.cloudtrail.resources.arn", "aws.cloudtrail.user_identity.invoked_by"]
[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-10d"


